# MediaPipe graph that performs face mesh with TensorFlow Lite on CPU.

# Input image. (ImageFrame)
input_stream: "input_video"

# user input. keyboard and mouse
input_stream: "user_input"

# Output image with rendered results. (ImageFrame)
output_stream: "output_video"

# Collection of detected/processed faces, each represented as a list of
# landmarks. (std::vector<NormalizedLandmarkList>)
output_stream: "multi_face_landmarks"

# Throttles the images flowing downstream for flow control. It passes through
# the very first incoming image unaltered, and waits for downstream nodes
# (calculators and subgraphs) in the graph to finish their tasks before it
# passes through another image. All images that come in while waiting are
# dropped, limiting the number of in-flight images in most part of the graph to
# 1. This prevents the downstream nodes from queuing up incoming images and data
# excessively, which leads to increased latency and memory usage, unwanted in
# real-time mobile applications. It also eliminates unnecessarily computation,
# e.g., the output produced by a node may get dropped downstream if the
# subsequent nodes are still busy processing previous inputs.
node {
  calculator: "FlowLimiterCalculator"
  input_stream: "input_video"
  input_stream: "FINISHED:output_video"
  input_stream_info: {
    tag_index: "FINISHED"
    back_edge: true
  }
  output_stream: "throttled_input_video"
}

# Defines side packets for further use in the graph.
node {
  calculator: "ConstantSidePacketCalculator"
  output_side_packet: "PACKET:0:num_faces"
  output_side_packet: "PACKET:1:with_attention"
  output_side_packet: "PACKET:2:use_prev_landmarks"
  output_side_packet: "PACKET:3:camera_vertical_fov"
  output_side_packet: "PACKET:4:face_geometry_path"
  output_side_packet: "PACKET:5:model_path"
  node_options: {
    [type.googleapis.com/mediapipe.ConstantSidePacketCalculatorOptions]: {
      packet { int_value: 1 }      # num_faces
      packet { bool_value: true }  # with_attention
      packet { bool_value: true }  # use_prev_landmarks
      packet { float_value: 43.0 } # camera_vertical_fov in degree, origin set to 63
      packet { string_value: "../../mediapipe/modules/face_geometry/data/geometry_pipeline_metadata_landmarks.pbtxt" }
      packet { string_value: "../../mediapipe/graphs/face_effect/data" }
    }
  }
}

# Subgraph that detects faces and corresponding landmarks.
node {
  calculator: "FaceLandmarkFrontCpu"
  input_stream: "IMAGE:throttled_input_video"
  input_side_packet: "NUM_FACES:num_faces"
  input_side_packet: "USE_PREV_LANDMARKS:use_prev_landmarks"
  input_side_packet: "WITH_ATTENTION:with_attention"
  output_stream: "LANDMARKS:multi_face_landmarks"
  output_stream: "ROIS_FROM_LANDMARKS:face_rects_from_landmarks"
  output_stream: "DETECTIONS:face_detections"
  output_stream: "ROIS_FROM_DETECTIONS:face_rects_from_detections"
}

# Subgraph that renders face-landmark annotation onto the input image.
node {
  calculator: "FaceEffectRenderer"
  input_side_packet: "FACE_GEOMETRY:face_geometry_path"
  input_side_packet: "MODEL_PATH:model_path"
  input_side_packet: "CAMERA_FOV:camera_vertical_fov"
  input_stream: "USER_INPUT:user_input"
  input_stream: "IMAGE:throttled_input_video"
  input_stream: "NORM_LANDMARKS:multi_face_landmarks"
  output_stream: "IMAGE:output_video"
}
